/*
Pingdom Public API

Testing TMSChecksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/karlderkaefer/pingdom-golang-client/pkg/pingdom/openapi"
)

func Test_openapi_TMSChecksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TMSChecksAPIService AddCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TMSChecksAPI.AddCheck(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TMSChecksAPIService DeleteCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid int64

		resp, httpRes, err := apiClient.TMSChecksAPI.DeleteCheck(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TMSChecksAPIService GetAllChecks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TMSChecksAPI.GetAllChecks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TMSChecksAPIService GetCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid int64

		resp, httpRes, err := apiClient.TMSChecksAPI.GetCheck(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TMSChecksAPIService GetCheckReportPerformance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkId int64

		resp, httpRes, err := apiClient.TMSChecksAPI.GetCheckReportPerformance(context.Background(), checkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TMSChecksAPIService GetCheckReportStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkId int64

		resp, httpRes, err := apiClient.TMSChecksAPI.GetCheckReportStatus(context.Background(), checkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TMSChecksAPIService GetCheckReportStatusAll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TMSChecksAPI.GetCheckReportStatusAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TMSChecksAPIService ModifyCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid int64

		resp, httpRes, err := apiClient.TMSChecksAPI.ModifyCheck(context.Background(), cid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
