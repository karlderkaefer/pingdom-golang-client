// Package teams provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package teams

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for MembersType.
const (
	Contact MembersType = "contact"
	User    MembersType = "user"
)

// AlertingTeamID defines model for AlertingTeam_ID.
type AlertingTeamID struct {
	// Id Team identifier
	Id      *int       `json:"id,omitempty"`
	Members *[]Members `json:"members,omitempty"`

	// Name Team name
	Name *string `json:"name,omitempty"`
}

// AlertingTeams defines model for AlertingTeams.
type AlertingTeams struct {
	// Id Team identifier
	Id      *int       `json:"id,omitempty"`
	Members *[]Members `json:"members,omitempty"`

	// Name Team name
	Name *string `json:"name,omitempty"`
}

// CreateTeam defines model for CreateTeam.
type CreateTeam struct {
	// MemberIds Contact ids
	MemberIds []int `json:"member_ids"`

	// Name Team name
	Name string `json:"name"`
}

// Members defines model for Members.
type Members struct {
	// Id Contact identifier
	Id *int `json:"id,omitempty"`

	// Name The team memberâ€™s name
	Name *string `json:"name,omitempty"`

	// Type Type defines whether the member is a user (login user) or a contact only
	Type *MembersType `json:"type,omitempty"`
}

// MembersType Type defines whether the member is a user (login user) or a contact only
type MembersType string

// TeamID defines model for Team_ID.
type TeamID struct {
	Team *AlertingTeamID `json:"team,omitempty"`
}

// Teams defines model for Teams.
type Teams struct {
	Teams *[]AlertingTeams `json:"teams,omitempty"`
}

// UpdateTeam defines model for UpdateTeam.
type UpdateTeam struct {
	// MemberIds IDs of contacts to be the members of this team
	MemberIds []int64 `json:"member_ids"`

	// Name Team name
	Name string `json:"name"`
}

// PostAlertingTeamsJSONRequestBody defines body for PostAlertingTeams for application/json ContentType.
type PostAlertingTeamsJSONRequestBody = CreateTeam

// PutAlertingTeamsTeamidJSONRequestBody defines body for PutAlertingTeamsTeamid for application/json ContentType.
type PutAlertingTeamsTeamidJSONRequestBody = UpdateTeam

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAlertingTeams request
	GetAlertingTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertingTeamsWithBody request with any body
	PostAlertingTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertingTeams(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertingTeamsTeamid request
	DeleteAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertingTeamsTeamid request
	GetAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertingTeamsTeamidWithBody request with any body
	PutAlertingTeamsTeamidWithBody(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertingTeamsTeamid(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAlertingTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertingTeamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertingTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertingTeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertingTeams(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertingTeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertingTeamsTeamidRequest(c.Server, teamid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertingTeamsTeamidRequest(c.Server, teamid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertingTeamsTeamidWithBody(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertingTeamsTeamidRequestWithBody(c.Server, teamid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertingTeamsTeamid(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertingTeamsTeamidRequest(c.Server, teamid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAlertingTeamsRequest generates requests for GetAlertingTeams
func NewGetAlertingTeamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertingTeamsRequest calls the generic PostAlertingTeams builder with application/json body
func NewPostAlertingTeamsRequest(server string, body PostAlertingTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertingTeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertingTeamsRequestWithBody generates requests for PostAlertingTeams with any type of body
func NewPostAlertingTeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertingTeamsTeamidRequest generates requests for DeleteAlertingTeamsTeamid
func NewDeleteAlertingTeamsTeamidRequest(server string, teamid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamid", runtime.ParamLocationPath, teamid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertingTeamsTeamidRequest generates requests for GetAlertingTeamsTeamid
func NewGetAlertingTeamsTeamidRequest(server string, teamid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamid", runtime.ParamLocationPath, teamid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertingTeamsTeamidRequest calls the generic PutAlertingTeamsTeamid builder with application/json body
func NewPutAlertingTeamsTeamidRequest(server string, teamid int, body PutAlertingTeamsTeamidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertingTeamsTeamidRequestWithBody(server, teamid, "application/json", bodyReader)
}

// NewPutAlertingTeamsTeamidRequestWithBody generates requests for PutAlertingTeamsTeamid with any type of body
func NewPutAlertingTeamsTeamidRequestWithBody(server string, teamid int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamid", runtime.ParamLocationPath, teamid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAlertingTeamsWithResponse request
	GetAlertingTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertingTeamsResponse, error)

	// PostAlertingTeamsWithBodyWithResponse request with any body
	PostAlertingTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error)

	PostAlertingTeamsWithResponse(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error)

	// DeleteAlertingTeamsTeamidWithResponse request
	DeleteAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*DeleteAlertingTeamsTeamidResponse, error)

	// GetAlertingTeamsTeamidWithResponse request
	GetAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*GetAlertingTeamsTeamidResponse, error)

	// PutAlertingTeamsTeamidWithBodyWithResponse request with any body
	PutAlertingTeamsTeamidWithBodyWithResponse(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error)

	PutAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error)
}

type GetAlertingTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Teams
}

// Status returns HTTPResponse.Status
func (r GetAlertingTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertingTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertingTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Team *struct {
			// Id ID of the created team
			Id *string `json:"id,omitempty"`
		} `json:"team,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAlertingTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertingTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertingTeamsTeamidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAlertingTeamsTeamidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertingTeamsTeamidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertingTeamsTeamidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamID
}

// Status returns HTTPResponse.Status
func (r GetAlertingTeamsTeamidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertingTeamsTeamidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertingTeamsTeamidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamID
}

// Status returns HTTPResponse.Status
func (r PutAlertingTeamsTeamidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertingTeamsTeamidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAlertingTeamsWithResponse request returning *GetAlertingTeamsResponse
func (c *ClientWithResponses) GetAlertingTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertingTeamsResponse, error) {
	rsp, err := c.GetAlertingTeams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertingTeamsResponse(rsp)
}

// PostAlertingTeamsWithBodyWithResponse request with arbitrary body returning *PostAlertingTeamsResponse
func (c *ClientWithResponses) PostAlertingTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error) {
	rsp, err := c.PostAlertingTeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertingTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostAlertingTeamsWithResponse(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error) {
	rsp, err := c.PostAlertingTeams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertingTeamsResponse(rsp)
}

// DeleteAlertingTeamsTeamidWithResponse request returning *DeleteAlertingTeamsTeamidResponse
func (c *ClientWithResponses) DeleteAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*DeleteAlertingTeamsTeamidResponse, error) {
	rsp, err := c.DeleteAlertingTeamsTeamid(ctx, teamid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertingTeamsTeamidResponse(rsp)
}

// GetAlertingTeamsTeamidWithResponse request returning *GetAlertingTeamsTeamidResponse
func (c *ClientWithResponses) GetAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*GetAlertingTeamsTeamidResponse, error) {
	rsp, err := c.GetAlertingTeamsTeamid(ctx, teamid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertingTeamsTeamidResponse(rsp)
}

// PutAlertingTeamsTeamidWithBodyWithResponse request with arbitrary body returning *PutAlertingTeamsTeamidResponse
func (c *ClientWithResponses) PutAlertingTeamsTeamidWithBodyWithResponse(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error) {
	rsp, err := c.PutAlertingTeamsTeamidWithBody(ctx, teamid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertingTeamsTeamidResponse(rsp)
}

func (c *ClientWithResponses) PutAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error) {
	rsp, err := c.PutAlertingTeamsTeamid(ctx, teamid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertingTeamsTeamidResponse(rsp)
}

// ParseGetAlertingTeamsResponse parses an HTTP response from a GetAlertingTeamsWithResponse call
func ParseGetAlertingTeamsResponse(rsp *http.Response) (*GetAlertingTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertingTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Teams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAlertingTeamsResponse parses an HTTP response from a PostAlertingTeamsWithResponse call
func ParsePostAlertingTeamsResponse(rsp *http.Response) (*PostAlertingTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertingTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Team *struct {
				// Id ID of the created team
				Id *string `json:"id,omitempty"`
			} `json:"team,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAlertingTeamsTeamidResponse parses an HTTP response from a DeleteAlertingTeamsTeamidWithResponse call
func ParseDeleteAlertingTeamsTeamidResponse(rsp *http.Response) (*DeleteAlertingTeamsTeamidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertingTeamsTeamidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertingTeamsTeamidResponse parses an HTTP response from a GetAlertingTeamsTeamidWithResponse call
func ParseGetAlertingTeamsTeamidResponse(rsp *http.Response) (*GetAlertingTeamsTeamidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertingTeamsTeamidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAlertingTeamsTeamidResponse parses an HTTP response from a PutAlertingTeamsTeamidWithResponse call
func ParsePutAlertingTeamsTeamidResponse(rsp *http.Response) (*PutAlertingTeamsTeamidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAlertingTeamsTeamidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
