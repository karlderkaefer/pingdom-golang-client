// Package checks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package checks

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CheckStatus.
const (
	CheckStatusDown            CheckStatus = "down"
	CheckStatusPaused          CheckStatus = "paused"
	CheckStatusUnconfirmedDown CheckStatus = "unconfirmed_down"
	CheckStatusUnknown         CheckStatus = "unknown"
	CheckStatusUp              CheckStatus = "up"
)

// Defines values for CreateCheckResolution.
const (
	CreateCheckResolutionN1  CreateCheckResolution = 1
	CreateCheckResolutionN15 CreateCheckResolution = 15
	CreateCheckResolutionN30 CreateCheckResolution = 30
	CreateCheckResolutionN5  CreateCheckResolution = 5
	CreateCheckResolutionN60 CreateCheckResolution = 60
)

// Defines values for CreateCheckType.
const (
	Dns        CreateCheckType = "dns"
	Http       CreateCheckType = "http"
	Httpcustom CreateCheckType = "httpcustom"
	Imap       CreateCheckType = "imap"
	Ping       CreateCheckType = "ping"
	Pop3       CreateCheckType = "pop3"
	Smtp       CreateCheckType = "smtp"
	Tcp        CreateCheckType = "tcp"
	Udp        CreateCheckType = "udp"
)

// Defines values for DetailedCheckDnsCheckStatus.
const (
	DetailedCheckDnsCheckStatusDown            DetailedCheckDnsCheckStatus = "down"
	DetailedCheckDnsCheckStatusPaused          DetailedCheckDnsCheckStatus = "paused"
	DetailedCheckDnsCheckStatusUnconfirmedDown DetailedCheckDnsCheckStatus = "unconfirmed_down"
	DetailedCheckDnsCheckStatusUnknown         DetailedCheckDnsCheckStatus = "unknown"
	DetailedCheckDnsCheckStatusUp              DetailedCheckDnsCheckStatus = "up"
)

// Defines values for DetailedCheckHttpCheckStatus.
const (
	DetailedCheckHttpCheckStatusDown            DetailedCheckHttpCheckStatus = "down"
	DetailedCheckHttpCheckStatusPaused          DetailedCheckHttpCheckStatus = "paused"
	DetailedCheckHttpCheckStatusUnconfirmedDown DetailedCheckHttpCheckStatus = "unconfirmed_down"
	DetailedCheckHttpCheckStatusUnknown         DetailedCheckHttpCheckStatus = "unknown"
	DetailedCheckHttpCheckStatusUp              DetailedCheckHttpCheckStatus = "up"
)

// Defines values for DetailedCheckHttpCustomCheckStatus.
const (
	DetailedCheckHttpCustomCheckStatusDown            DetailedCheckHttpCustomCheckStatus = "down"
	DetailedCheckHttpCustomCheckStatusPaused          DetailedCheckHttpCustomCheckStatus = "paused"
	DetailedCheckHttpCustomCheckStatusUnconfirmedDown DetailedCheckHttpCustomCheckStatus = "unconfirmed_down"
	DetailedCheckHttpCustomCheckStatusUnknown         DetailedCheckHttpCustomCheckStatus = "unknown"
	DetailedCheckHttpCustomCheckStatusUp              DetailedCheckHttpCustomCheckStatus = "up"
)

// Defines values for DetailedCheckImapCheckStatus.
const (
	DetailedCheckImapCheckStatusDown            DetailedCheckImapCheckStatus = "down"
	DetailedCheckImapCheckStatusPaused          DetailedCheckImapCheckStatus = "paused"
	DetailedCheckImapCheckStatusUnconfirmedDown DetailedCheckImapCheckStatus = "unconfirmed_down"
	DetailedCheckImapCheckStatusUnknown         DetailedCheckImapCheckStatus = "unknown"
	DetailedCheckImapCheckStatusUp              DetailedCheckImapCheckStatus = "up"
)

// Defines values for DetailedCheckPop3CheckStatus.
const (
	DetailedCheckPop3CheckStatusDown            DetailedCheckPop3CheckStatus = "down"
	DetailedCheckPop3CheckStatusPaused          DetailedCheckPop3CheckStatus = "paused"
	DetailedCheckPop3CheckStatusUnconfirmedDown DetailedCheckPop3CheckStatus = "unconfirmed_down"
	DetailedCheckPop3CheckStatusUnknown         DetailedCheckPop3CheckStatus = "unknown"
	DetailedCheckPop3CheckStatusUp              DetailedCheckPop3CheckStatus = "up"
)

// Defines values for DetailedCheckSmtpCheckStatus.
const (
	DetailedCheckSmtpCheckStatusDown            DetailedCheckSmtpCheckStatus = "down"
	DetailedCheckSmtpCheckStatusPaused          DetailedCheckSmtpCheckStatus = "paused"
	DetailedCheckSmtpCheckStatusUnconfirmedDown DetailedCheckSmtpCheckStatus = "unconfirmed_down"
	DetailedCheckSmtpCheckStatusUnknown         DetailedCheckSmtpCheckStatus = "unknown"
	DetailedCheckSmtpCheckStatusUp              DetailedCheckSmtpCheckStatus = "up"
)

// Defines values for DetailedCheckTcpCheckStatus.
const (
	DetailedCheckTcpCheckStatusDown            DetailedCheckTcpCheckStatus = "down"
	DetailedCheckTcpCheckStatusPaused          DetailedCheckTcpCheckStatus = "paused"
	DetailedCheckTcpCheckStatusUnconfirmedDown DetailedCheckTcpCheckStatus = "unconfirmed_down"
	DetailedCheckTcpCheckStatusUnknown         DetailedCheckTcpCheckStatus = "unknown"
	DetailedCheckTcpCheckStatusUp              DetailedCheckTcpCheckStatus = "up"
)

// Defines values for DetailedCheckUdpCheckStatus.
const (
	Down            DetailedCheckUdpCheckStatus = "down"
	Paused          DetailedCheckUdpCheckStatus = "paused"
	UnconfirmedDown DetailedCheckUdpCheckStatus = "unconfirmed_down"
	Unknown         DetailedCheckUdpCheckStatus = "unknown"
	Up              DetailedCheckUdpCheckStatus = "up"
)

// Defines values for ModifyCheckSettingsResolution.
const (
	ModifyCheckSettingsResolutionN1  ModifyCheckSettingsResolution = 1
	ModifyCheckSettingsResolutionN15 ModifyCheckSettingsResolution = 15
	ModifyCheckSettingsResolutionN30 ModifyCheckSettingsResolution = 30
	ModifyCheckSettingsResolutionN5  ModifyCheckSettingsResolution = 5
	ModifyCheckSettingsResolutionN60 ModifyCheckSettingsResolution = 60
)

// Defines values for PutChecksJSONBodyResolution.
const (
	PutChecksJSONBodyResolutionN1  PutChecksJSONBodyResolution = 1
	PutChecksJSONBodyResolutionN15 PutChecksJSONBodyResolution = 15
	PutChecksJSONBodyResolutionN30 PutChecksJSONBodyResolution = 30
	PutChecksJSONBodyResolutionN5  PutChecksJSONBodyResolution = 5
	PutChecksJSONBodyResolutionN60 PutChecksJSONBodyResolution = 60
)

// Defines values for PutChecksFormdataBodyResolution.
const (
	PutChecksFormdataBodyResolutionN1  PutChecksFormdataBodyResolution = 1
	PutChecksFormdataBodyResolutionN15 PutChecksFormdataBodyResolution = 15
	PutChecksFormdataBodyResolutionN30 PutChecksFormdataBodyResolution = 30
	PutChecksFormdataBodyResolutionN5  PutChecksFormdataBodyResolution = 5
	PutChecksFormdataBodyResolutionN60 PutChecksFormdataBodyResolution = 60
)

// Check defines model for Check.
type Check struct {
	// Created Creating time. Format is UNIX timestamp
	Created *int `json:"created,omitempty"`

	// Hostname Target host
	Hostname *string `json:"hostname,omitempty"`
	Id       *int    `json:"id,omitempty"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
	Lastdownend *int `json:"lastdownend,omitempty"`

	// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
	Lastdownstart *int `json:"lastdownstart,omitempty"`

	// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
	Lasterrortime *int `json:"lasterrortime,omitempty"`

	// Lastresponsetime Response time (in milliseconds) of last test.
	Lastresponsetime *int `json:"lastresponsetime,omitempty"`

	// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
	Lasttesttime *int    `json:"lasttesttime,omitempty"`
	Name         *string `json:"name,omitempty"`

	// Resolution How often should the check be tested? (minutes)
	Resolution *int         `json:"resolution,omitempty"`
	Status     *CheckStatus `json:"status,omitempty"`

	// Tags List of tags for check
	Tags *[]Tag `json:"tags,omitempty"`
}

// CheckStatus defines model for Check.Status.
type CheckStatus string

// CheckWithStringType defines model for CheckWithStringType.
type CheckWithStringType = Check

// Checks defines model for Checks.
type Checks struct {
	Checks *[]CheckWithStringType `json:"checks,omitempty"`
	Counts *Counts                `json:"counts,omitempty"`
}

// Counts defines model for Counts.
type Counts struct {
	// Filtered Number of checks after limit was applied
	Filtered *int `json:"filtered,omitempty"`

	// Limited Number of checks after tags filter was applied
	Limited *int `json:"limited,omitempty"`

	// Total Total number of checks
	Total *int `json:"total,omitempty"`
}

// CreateCheck defines model for CreateCheck.
type CreateCheck struct {
	// CustomMessage Custom message that will be added to email and webhook alerts.
	CustomMessage *string `json:"custom_message,omitempty"`

	// Host Target host
	Host string `json:"host"`

	// Integrationids Integration identifiers. For example integrationids:[1,2,3].
	Integrationids *[]int `json:"integrationids,omitempty"`

	// Ipv6 Use ipv6 instead of ipv4, if an IP address is provided as host this will be overrided by the IP address version
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Name Check name
	Name string `json:"name"`

	// Notifyagainevery Notify again every n result. 0 means that no extra notifications will be sent.
	Notifyagainevery *int `json:"notifyagainevery,omitempty"`

	// Notifywhenbackup Notify when back up again
	Notifywhenbackup *bool `json:"notifywhenbackup,omitempty"`
	Paused           *bool `json:"paused,omitempty"`

	// ProbeFilters Filters used for probe selections. Overwrites previous filters for check. To remove all filters from a check, use an empty value. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'. For example, "region: NA".
	ProbeFilters *[]string `json:"probe_filters,omitempty"`

	// Resolution How often should the check be tested? (minutes)
	Resolution *CreateCheckResolution `json:"resolution,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Sendnotificationwhendown Send notification when down X times
	Sendnotificationwhendown *int `json:"sendnotificationwhendown,omitempty"`

	// Tags List of tags for check. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// Teamids Teams to alert. Comma separated Integers.
	Teamids *string `json:"teamids,omitempty"`

	// Type Type of check
	Type CreateCheckType `json:"type"`

	// Userids User identifiers. For example userids=154325,465231,765871
	Userids *string `json:"userids,omitempty"`
	union   json.RawMessage
}

// CreateCheckResolution How often should the check be tested? (minutes)
type CreateCheckResolution int

// CreateCheckType Type of check
type CreateCheckType string

// DetailedCheck defines model for DetailedCheck.
type DetailedCheck struct {
	union json.RawMessage
}

// DetailedCheckAttributes defines model for DetailedCheckAttributes.
type DetailedCheckAttributes = Check

// DetailedCheckDns defines model for DetailedCheckDns.
type DetailedCheckDns struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                         `json:"resolution,omitempty"`
		Status     *DetailedCheckDnsCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Dns *DnsAttributes `json:"dns,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckDnsCheckStatus defines model for DetailedCheckDns.Check.Status.
type DetailedCheckDnsCheckStatus string

// DetailedCheckHttp defines model for DetailedCheckHttp.
type DetailedCheckHttp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckHttpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Http *HttpAttributesGet `json:"http,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckHttpCheckStatus defines model for DetailedCheckHttp.Check.Status.
type DetailedCheckHttpCheckStatus string

// DetailedCheckHttpCustom defines model for DetailedCheckHttpCustom.
type DetailedCheckHttpCustom struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int `json:"resolution,omitempty"`

		// SslDownDaysBefore Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if `verify_certificate` is set to `false`.
		SslDownDaysBefore *int                                `json:"ssl_down_days_before,omitempty"`
		Status            *DetailedCheckHttpCustomCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Httpcustom *HttpCustomAttributes `json:"httpcustom,omitempty"`
		} `json:"type,omitempty"`

		// VerifyCertificate Treat target site as down if an invalid/unverifiable certificate is found.
		VerifyCertificate *bool `json:"verify_certificate,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckHttpCustomCheckStatus defines model for DetailedCheckHttpCustom.Check.Status.
type DetailedCheckHttpCustomCheckStatus string

// DetailedCheckImap defines model for DetailedCheckImap.
type DetailedCheckImap struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckImapCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Imap *ImapAttributes `json:"imap,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckImapCheckStatus defines model for DetailedCheckImap.Check.Status.
type DetailedCheckImapCheckStatus string

// DetailedCheckPop3 defines model for DetailedCheckPop3.
type DetailedCheckPop3 struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckPop3CheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Pop3 *Pop3Attributes `json:"pop3,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckPop3CheckStatus defines model for DetailedCheckPop3.Check.Status.
type DetailedCheckPop3CheckStatus string

// DetailedCheckSmtp defines model for DetailedCheckSmtp.
type DetailedCheckSmtp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckSmtpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Smtp *SmtpAttributesGet `json:"smtp,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckSmtpCheckStatus defines model for DetailedCheckSmtp.Check.Status.
type DetailedCheckSmtpCheckStatus string

// DetailedCheckTcp defines model for DetailedCheckTcp.
type DetailedCheckTcp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                         `json:"resolution,omitempty"`
		Status     *DetailedCheckTcpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Tcp *TcpAttributes `json:"tcp,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckTcpCheckStatus defines model for DetailedCheckTcp.Check.Status.
type DetailedCheckTcpCheckStatus string

// DetailedCheckUdp defines model for DetailedCheckUdp.
type DetailedCheckUdp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                         `json:"resolution,omitempty"`
		Status     *DetailedCheckUdpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Udp *UdpAttributes `json:"udp,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckUdpCheckStatus defines model for DetailedCheckUdp.Check.Status.
type DetailedCheckUdpCheckStatus string

// DetailedDnsAttributes defines model for DetailedDnsAttributes.
type DetailedDnsAttributes struct {
	Type *struct {
		Dns *DnsAttributes `json:"dns,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedHttpAttributes defines model for DetailedHttpAttributes.
type DetailedHttpAttributes struct {
	Type *struct {
		Http *HttpAttributesGet `json:"http,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedHttpCustomAttributes defines model for DetailedHttpCustomAttributes.
type DetailedHttpCustomAttributes struct {
	Type *struct {
		Httpcustom *HttpCustomAttributes `json:"httpcustom,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedImapAttributes defines model for DetailedImapAttributes.
type DetailedImapAttributes struct {
	Type *struct {
		Imap *ImapAttributes `json:"imap,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedPop3Attributes defines model for DetailedPop3Attributes.
type DetailedPop3Attributes struct {
	Type *struct {
		Pop3 *Pop3Attributes `json:"pop3,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedSmtpAttributes defines model for DetailedSmtpAttributes.
type DetailedSmtpAttributes struct {
	Type *struct {
		Smtp *SmtpAttributesGet `json:"smtp,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedTcpAttributes defines model for DetailedTcpAttributes.
type DetailedTcpAttributes struct {
	Type *struct {
		Tcp *TcpAttributes `json:"tcp,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedUdpAttributes defines model for DetailedUdpAttributes.
type DetailedUdpAttributes struct {
	Type *struct {
		Udp *UdpAttributes `json:"udp,omitempty"`
	} `json:"type,omitempty"`
}

// DnsAttributes defines model for DnsAttributes.
type DnsAttributes struct {
	// Expectedip Expected IP
	Expectedip string `json:"expectedip"`

	// Nameserver DNS server to use
	Nameserver string `json:"nameserver"`
}

// HttpAttributesBase defines model for HttpAttributesBase.
type HttpAttributesBase struct {
	// Encryption Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Port Target port
	Port *int `json:"port,omitempty"`

	// Postdata Data that should be posted to the web page, for example submission data for a sign-up or login form. The data needs to be formatted in the same way as a web browser would send it to the web server
	Postdata *string `json:"postdata,omitempty"`

	// Requestheaders Custom HTTP header. The entry value should contain a one-element string array. The element should contain `headerName` and `headerValue` colon-separated. To add more than one header send other parameters named `requestheaders{number}`.
	Requestheaders *[]string `json:"requestheaders,omitempty"`

	// Shouldcontain Target site should contain this string. Note! This parameter cannot be used together with the parameter “shouldnotcontain”, use only one of them in your request.
	Shouldcontain *string `json:"shouldcontain,omitempty"`

	// Shouldnotcontain Target site should NOT contain this string. Note! This parameter cannot be used together with the parameter “shouldcontain”, use only one of them in your request.
	Shouldnotcontain *string `json:"shouldnotcontain,omitempty"`

	// SslDownDaysBefore Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if `verify_certificate` is set to `false`. It will appear provided `verify_certificate` is true and `ssl_down_days_before` value is greater than or equals 1.
	SslDownDaysBefore *int `json:"ssl_down_days_before,omitempty"`

	// Url Path to target on server
	Url *string `json:"url,omitempty"`

	// VerifyCertificate Treat target site as down if an invalid/unverifiable certificate is found.
	VerifyCertificate *bool `json:"verify_certificate,omitempty"`
}

// HttpAttributesGet defines model for HttpAttributesGet.
type HttpAttributesGet = HttpAttributesBase

// HttpAttributesSet defines model for HttpAttributesSet.
type HttpAttributesSet = HttpAttributesBase

// HttpCertificateAttributes defines model for HttpCertificateAttributes.
type HttpCertificateAttributes struct {
	// SslDownDaysBefore Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if `verify_certificate` is set to `false`.
	SslDownDaysBefore *int `json:"ssl_down_days_before,omitempty"`

	// VerifyCertificate Treat target site as down if an invalid/unverifiable certificate is found.
	VerifyCertificate *bool `json:"verify_certificate,omitempty"`
}

// HttpCustomAttributes defines model for HttpCustomAttributes.
type HttpCustomAttributes = HttpCertificateAttributes

// ImapAttributes defines model for ImapAttributes.
type ImapAttributes struct {
	// Port Target port
	Port *int `json:"port,omitempty"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`
}

// ModifyCheckSettings defines model for ModifyCheckSettings.
type ModifyCheckSettings struct {
	// Addtags Check tags to add in addition to current check tags
	Addtags *[]string `json:"addtags,omitempty"`

	// Checkids Identifiers of checks to modify in bulk. For example checkids=1234,5678
	Checkids *string `json:"checkids,omitempty"`

	// CustomMessage Custom message that will be added to email and webhook alerts.
	CustomMessage *string `json:"custom_message,omitempty"`

	// Host Target host
	Host *string `json:"host,omitempty"`

	// Integrationids Integration identifiers. For example integrationids:[1,2,3].
	Integrationids *[]int `json:"integrationids,omitempty"`

	// Ipv6 Use ipv6 instead of ipv4, if an IP address is provided as host this will be overrided by the IP address version
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Name Check name
	Name *string `json:"name,omitempty"`

	// Notifyagainevery Notify again every n result. 0 means that no extra notifications will be sent.
	Notifyagainevery *int `json:"notifyagainevery,omitempty"`

	// Notifywhenbackup Notify when back up again
	Notifywhenbackup *bool `json:"notifywhenbackup,omitempty"`
	Paused           *bool `json:"paused,omitempty"`

	// ProbeFilters Filters used for probe selections. Overwrites previous filters for check. To remove all filters from a check, use an empty value. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'. For example, "region: NA".
	ProbeFilters *[]string `json:"probe_filters,omitempty"`

	// Resolution How often should the check be tested? (minutes)
	Resolution *ModifyCheckSettingsResolution `json:"resolution,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Sendnotificationwhendown Send notification when down X times
	Sendnotificationwhendown *int `json:"sendnotificationwhendown,omitempty"`

	// Tags List of tags for check. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// Teamids Teams to alert. Comma separated Integers.
	Teamids *string `json:"teamids,omitempty"`

	// Userids User identifiers. For example userids=154325,465231,765871
	Userids *string `json:"userids,omitempty"`
	union   json.RawMessage
}

// ModifyCheckSettingsResolution How often should the check be tested? (minutes)
type ModifyCheckSettingsResolution int

// Pop3Attributes defines model for Pop3Attributes.
type Pop3Attributes struct {
	// Port Target port
	Port *int `json:"port,omitempty"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`
}

// SmtpAttributesBase defines model for SmtpAttributesBase.
type SmtpAttributesBase struct {
	// Encryption Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Port Target port
	Port *int `json:"port,omitempty"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`
}

// SmtpAttributesGet defines model for SmtpAttributesGet.
type SmtpAttributesGet = SmtpAttributesBase

// SmtpAttributesSet defines model for SmtpAttributesSet.
type SmtpAttributesSet = SmtpAttributesBase

// Tag defines model for Tag.
type Tag struct {
	Count *int    `json:"count,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// TcpAttributes defines model for TcpAttributes.
type TcpAttributes struct {
	// Port Target port
	Port int `json:"port"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`

	// Stringtosend String to send
	Stringtosend *string `json:"stringtosend,omitempty"`
}

// UdpAttributes defines model for UdpAttributes.
type UdpAttributes struct {
	// Port Target port
	Port int `json:"port"`

	// Stringtoexpect String to expect in response
	Stringtoexpect string `json:"stringtoexpect"`

	// Stringtosend String to send
	Stringtosend string `json:"stringtosend"`
}

// DeleteChecksJSONBody defines parameters for DeleteChecks.
type DeleteChecksJSONBody = string

// DeleteChecksParams defines parameters for DeleteChecks.
type DeleteChecksParams struct {
	// Delcheckids Comma-separated list of identifiers for checks to be deleted.
	Delcheckids []int `form:"delcheckids" json:"delcheckids"`
}

// GetChecksParams defines parameters for GetChecks.
type GetChecksParams struct {
	// Limit Limits the number of returned probes to the specified quantity. (Max value is 25000)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for listing. (Requires limit.)
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Showencryption If set, show encryption setting for each check
	Showencryption *bool `form:"showencryption,omitempty" json:"showencryption,omitempty"`

	// IncludeTags Include tag list for each check. Tags can be marked as "a" or "u", for auto tagged or user tagged.
	IncludeTags *bool `form:"include_tags,omitempty" json:"include_tags,omitempty"`

	// IncludeSeverity Include severity level for each check.
	IncludeSeverity *bool `form:"include_severity,omitempty" json:"include_severity,omitempty"`

	// Tags Tag list separated by commas. As an example "nginx,apache" would filter out all responses except those tagged nginx or apache
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`
}

// PutChecksJSONBody defines parameters for PutChecks.
type PutChecksJSONBody struct {
	// Checkids Comma-separated list of identifiers for checks to be modified. Invalid check identifiers will be ignored. Default: all checks
	Checkids *string `json:"checkids,omitempty"`

	// Paused Use value: true to pause the check(s) and value: false to unpause it(them).
	Paused     *bool                        `json:"paused,omitempty"`
	Resolution *PutChecksJSONBodyResolution `json:"resolution,omitempty"`
}

// PutChecksFormdataBody defines parameters for PutChecks.
type PutChecksFormdataBody struct {
	// Checkids Comma-separated list of identifiers for checks to be modified. Invalid check identifiers will be ignored. Default: all checks
	Checkids *string `form:"checkids,omitempty" json:"checkids,omitempty"`

	// Paused Use value: true to pause the check(s) and value: false to unpause it(them).
	Paused     *bool                            `form:"paused,omitempty" json:"paused,omitempty"`
	Resolution *PutChecksFormdataBodyResolution `form:"resolution,omitempty" json:"resolution,omitempty"`
}

// PutChecksJSONBodyResolution defines parameters for PutChecks.
type PutChecksJSONBodyResolution int

// PutChecksFormdataBodyResolution defines parameters for PutChecks.
type PutChecksFormdataBodyResolution int

// GetChecksCheckidParams defines parameters for GetChecksCheckid.
type GetChecksCheckidParams struct {
	// IncludeTeams Include team connections for check.
	IncludeTeams *bool `form:"include_teams,omitempty" json:"include_teams,omitempty"`
}

// DeleteChecksJSONRequestBody defines body for DeleteChecks for application/json ContentType.
type DeleteChecksJSONRequestBody = DeleteChecksJSONBody

// PostChecksJSONRequestBody defines body for PostChecks for application/json ContentType.
type PostChecksJSONRequestBody = CreateCheck

// PostChecksFormdataRequestBody defines body for PostChecks for application/x-www-form-urlencoded ContentType.
type PostChecksFormdataRequestBody = CreateCheck

// PutChecksJSONRequestBody defines body for PutChecks for application/json ContentType.
type PutChecksJSONRequestBody PutChecksJSONBody

// PutChecksFormdataRequestBody defines body for PutChecks for application/x-www-form-urlencoded ContentType.
type PutChecksFormdataRequestBody PutChecksFormdataBody

// PutChecksCheckidJSONRequestBody defines body for PutChecksCheckid for application/json ContentType.
type PutChecksCheckidJSONRequestBody = ModifyCheckSettings

// PutChecksCheckidFormdataRequestBody defines body for PutChecksCheckid for application/x-www-form-urlencoded ContentType.
type PutChecksCheckidFormdataRequestBody = ModifyCheckSettings

// AsHttpAttributesSet returns the union data inside the CreateCheck as a HttpAttributesSet
func (t CreateCheck) AsHttpAttributesSet() (HttpAttributesSet, error) {
	var body HttpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpAttributesSet overwrites any union data inside the CreateCheck as the provided HttpAttributesSet
func (t *CreateCheck) FromHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpAttributesSet performs a merge with any union data inside the CreateCheck, using the provided HttpAttributesSet
func (t *CreateCheck) MergeHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpCustomAttributes returns the union data inside the CreateCheck as a HttpCustomAttributes
func (t CreateCheck) AsHttpCustomAttributes() (HttpCustomAttributes, error) {
	var body HttpCustomAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpCustomAttributes overwrites any union data inside the CreateCheck as the provided HttpCustomAttributes
func (t *CreateCheck) FromHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpCustomAttributes performs a merge with any union data inside the CreateCheck, using the provided HttpCustomAttributes
func (t *CreateCheck) MergeHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTcpAttributes returns the union data inside the CreateCheck as a TcpAttributes
func (t CreateCheck) AsTcpAttributes() (TcpAttributes, error) {
	var body TcpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTcpAttributes overwrites any union data inside the CreateCheck as the provided TcpAttributes
func (t *CreateCheck) FromTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTcpAttributes performs a merge with any union data inside the CreateCheck, using the provided TcpAttributes
func (t *CreateCheck) MergeTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDnsAttributes returns the union data inside the CreateCheck as a DnsAttributes
func (t CreateCheck) AsDnsAttributes() (DnsAttributes, error) {
	var body DnsAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnsAttributes overwrites any union data inside the CreateCheck as the provided DnsAttributes
func (t *CreateCheck) FromDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnsAttributes performs a merge with any union data inside the CreateCheck, using the provided DnsAttributes
func (t *CreateCheck) MergeDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUdpAttributes returns the union data inside the CreateCheck as a UdpAttributes
func (t CreateCheck) AsUdpAttributes() (UdpAttributes, error) {
	var body UdpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUdpAttributes overwrites any union data inside the CreateCheck as the provided UdpAttributes
func (t *CreateCheck) FromUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUdpAttributes performs a merge with any union data inside the CreateCheck, using the provided UdpAttributes
func (t *CreateCheck) MergeUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSmtpAttributesSet returns the union data inside the CreateCheck as a SmtpAttributesSet
func (t CreateCheck) AsSmtpAttributesSet() (SmtpAttributesSet, error) {
	var body SmtpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmtpAttributesSet overwrites any union data inside the CreateCheck as the provided SmtpAttributesSet
func (t *CreateCheck) FromSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmtpAttributesSet performs a merge with any union data inside the CreateCheck, using the provided SmtpAttributesSet
func (t *CreateCheck) MergeSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPop3Attributes returns the union data inside the CreateCheck as a Pop3Attributes
func (t CreateCheck) AsPop3Attributes() (Pop3Attributes, error) {
	var body Pop3Attributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPop3Attributes overwrites any union data inside the CreateCheck as the provided Pop3Attributes
func (t *CreateCheck) FromPop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePop3Attributes performs a merge with any union data inside the CreateCheck, using the provided Pop3Attributes
func (t *CreateCheck) MergePop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsImapAttributes returns the union data inside the CreateCheck as a ImapAttributes
func (t CreateCheck) AsImapAttributes() (ImapAttributes, error) {
	var body ImapAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImapAttributes overwrites any union data inside the CreateCheck as the provided ImapAttributes
func (t *CreateCheck) FromImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImapAttributes performs a merge with any union data inside the CreateCheck, using the provided ImapAttributes
func (t *CreateCheck) MergeImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCheck) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CustomMessage != nil {
		object["custom_message"], err = json.Marshal(t.CustomMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'custom_message': %w", err)
		}
	}

	object["host"], err = json.Marshal(t.Host)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'host': %w", err)
	}

	if t.Integrationids != nil {
		object["integrationids"], err = json.Marshal(t.Integrationids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'integrationids': %w", err)
		}
	}

	if t.Ipv6 != nil {
		object["ipv6"], err = json.Marshal(t.Ipv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6': %w", err)
		}
	}

	object["name"], err = json.Marshal(t.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if t.Notifyagainevery != nil {
		object["notifyagainevery"], err = json.Marshal(t.Notifyagainevery)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyagainevery': %w", err)
		}
	}

	if t.Notifywhenbackup != nil {
		object["notifywhenbackup"], err = json.Marshal(t.Notifywhenbackup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifywhenbackup': %w", err)
		}
	}

	if t.Paused != nil {
		object["paused"], err = json.Marshal(t.Paused)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paused': %w", err)
		}
	}

	if t.ProbeFilters != nil {
		object["probe_filters"], err = json.Marshal(t.ProbeFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'probe_filters': %w", err)
		}
	}

	if t.Resolution != nil {
		object["resolution"], err = json.Marshal(t.Resolution)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resolution': %w", err)
		}
	}

	if t.ResponsetimeThreshold != nil {
		object["responsetime_threshold"], err = json.Marshal(t.ResponsetimeThreshold)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'responsetime_threshold': %w", err)
		}
	}

	if t.Sendnotificationwhendown != nil {
		object["sendnotificationwhendown"], err = json.Marshal(t.Sendnotificationwhendown)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sendnotificationwhendown': %w", err)
		}
	}

	if t.Tags != nil {
		object["tags"], err = json.Marshal(t.Tags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tags': %w", err)
		}
	}

	if t.Teamids != nil {
		object["teamids"], err = json.Marshal(t.Teamids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'teamids': %w", err)
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if t.Userids != nil {
		object["userids"], err = json.Marshal(t.Userids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userids': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CreateCheck) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["custom_message"]; found {
		err = json.Unmarshal(raw, &t.CustomMessage)
		if err != nil {
			return fmt.Errorf("error reading 'custom_message': %w", err)
		}
	}

	if raw, found := object["host"]; found {
		err = json.Unmarshal(raw, &t.Host)
		if err != nil {
			return fmt.Errorf("error reading 'host': %w", err)
		}
	}

	if raw, found := object["integrationids"]; found {
		err = json.Unmarshal(raw, &t.Integrationids)
		if err != nil {
			return fmt.Errorf("error reading 'integrationids': %w", err)
		}
	}

	if raw, found := object["ipv6"]; found {
		err = json.Unmarshal(raw, &t.Ipv6)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["notifyagainevery"]; found {
		err = json.Unmarshal(raw, &t.Notifyagainevery)
		if err != nil {
			return fmt.Errorf("error reading 'notifyagainevery': %w", err)
		}
	}

	if raw, found := object["notifywhenbackup"]; found {
		err = json.Unmarshal(raw, &t.Notifywhenbackup)
		if err != nil {
			return fmt.Errorf("error reading 'notifywhenbackup': %w", err)
		}
	}

	if raw, found := object["paused"]; found {
		err = json.Unmarshal(raw, &t.Paused)
		if err != nil {
			return fmt.Errorf("error reading 'paused': %w", err)
		}
	}

	if raw, found := object["probe_filters"]; found {
		err = json.Unmarshal(raw, &t.ProbeFilters)
		if err != nil {
			return fmt.Errorf("error reading 'probe_filters': %w", err)
		}
	}

	if raw, found := object["resolution"]; found {
		err = json.Unmarshal(raw, &t.Resolution)
		if err != nil {
			return fmt.Errorf("error reading 'resolution': %w", err)
		}
	}

	if raw, found := object["responsetime_threshold"]; found {
		err = json.Unmarshal(raw, &t.ResponsetimeThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'responsetime_threshold': %w", err)
		}
	}

	if raw, found := object["sendnotificationwhendown"]; found {
		err = json.Unmarshal(raw, &t.Sendnotificationwhendown)
		if err != nil {
			return fmt.Errorf("error reading 'sendnotificationwhendown': %w", err)
		}
	}

	if raw, found := object["tags"]; found {
		err = json.Unmarshal(raw, &t.Tags)
		if err != nil {
			return fmt.Errorf("error reading 'tags': %w", err)
		}
	}

	if raw, found := object["teamids"]; found {
		err = json.Unmarshal(raw, &t.Teamids)
		if err != nil {
			return fmt.Errorf("error reading 'teamids': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	if raw, found := object["userids"]; found {
		err = json.Unmarshal(raw, &t.Userids)
		if err != nil {
			return fmt.Errorf("error reading 'userids': %w", err)
		}
	}

	return err
}

// AsDetailedCheckHttp returns the union data inside the DetailedCheck as a DetailedCheckHttp
func (t DetailedCheck) AsDetailedCheckHttp() (DetailedCheckHttp, error) {
	var body DetailedCheckHttp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckHttp overwrites any union data inside the DetailedCheck as the provided DetailedCheckHttp
func (t *DetailedCheck) FromDetailedCheckHttp(v DetailedCheckHttp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckHttp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckHttp
func (t *DetailedCheck) MergeDetailedCheckHttp(v DetailedCheckHttp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckHttpCustom returns the union data inside the DetailedCheck as a DetailedCheckHttpCustom
func (t DetailedCheck) AsDetailedCheckHttpCustom() (DetailedCheckHttpCustom, error) {
	var body DetailedCheckHttpCustom
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckHttpCustom overwrites any union data inside the DetailedCheck as the provided DetailedCheckHttpCustom
func (t *DetailedCheck) FromDetailedCheckHttpCustom(v DetailedCheckHttpCustom) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckHttpCustom performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckHttpCustom
func (t *DetailedCheck) MergeDetailedCheckHttpCustom(v DetailedCheckHttpCustom) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckTcp returns the union data inside the DetailedCheck as a DetailedCheckTcp
func (t DetailedCheck) AsDetailedCheckTcp() (DetailedCheckTcp, error) {
	var body DetailedCheckTcp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckTcp overwrites any union data inside the DetailedCheck as the provided DetailedCheckTcp
func (t *DetailedCheck) FromDetailedCheckTcp(v DetailedCheckTcp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckTcp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckTcp
func (t *DetailedCheck) MergeDetailedCheckTcp(v DetailedCheckTcp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckDns returns the union data inside the DetailedCheck as a DetailedCheckDns
func (t DetailedCheck) AsDetailedCheckDns() (DetailedCheckDns, error) {
	var body DetailedCheckDns
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckDns overwrites any union data inside the DetailedCheck as the provided DetailedCheckDns
func (t *DetailedCheck) FromDetailedCheckDns(v DetailedCheckDns) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckDns performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckDns
func (t *DetailedCheck) MergeDetailedCheckDns(v DetailedCheckDns) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckUdp returns the union data inside the DetailedCheck as a DetailedCheckUdp
func (t DetailedCheck) AsDetailedCheckUdp() (DetailedCheckUdp, error) {
	var body DetailedCheckUdp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckUdp overwrites any union data inside the DetailedCheck as the provided DetailedCheckUdp
func (t *DetailedCheck) FromDetailedCheckUdp(v DetailedCheckUdp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckUdp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckUdp
func (t *DetailedCheck) MergeDetailedCheckUdp(v DetailedCheckUdp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckSmtp returns the union data inside the DetailedCheck as a DetailedCheckSmtp
func (t DetailedCheck) AsDetailedCheckSmtp() (DetailedCheckSmtp, error) {
	var body DetailedCheckSmtp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckSmtp overwrites any union data inside the DetailedCheck as the provided DetailedCheckSmtp
func (t *DetailedCheck) FromDetailedCheckSmtp(v DetailedCheckSmtp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckSmtp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckSmtp
func (t *DetailedCheck) MergeDetailedCheckSmtp(v DetailedCheckSmtp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckPop3 returns the union data inside the DetailedCheck as a DetailedCheckPop3
func (t DetailedCheck) AsDetailedCheckPop3() (DetailedCheckPop3, error) {
	var body DetailedCheckPop3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckPop3 overwrites any union data inside the DetailedCheck as the provided DetailedCheckPop3
func (t *DetailedCheck) FromDetailedCheckPop3(v DetailedCheckPop3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckPop3 performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckPop3
func (t *DetailedCheck) MergeDetailedCheckPop3(v DetailedCheckPop3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckImap returns the union data inside the DetailedCheck as a DetailedCheckImap
func (t DetailedCheck) AsDetailedCheckImap() (DetailedCheckImap, error) {
	var body DetailedCheckImap
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckImap overwrites any union data inside the DetailedCheck as the provided DetailedCheckImap
func (t *DetailedCheck) FromDetailedCheckImap(v DetailedCheckImap) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckImap performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckImap
func (t *DetailedCheck) MergeDetailedCheckImap(v DetailedCheckImap) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DetailedCheck) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DetailedCheck) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHttpAttributesSet returns the union data inside the ModifyCheckSettings as a HttpAttributesSet
func (t ModifyCheckSettings) AsHttpAttributesSet() (HttpAttributesSet, error) {
	var body HttpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpAttributesSet overwrites any union data inside the ModifyCheckSettings as the provided HttpAttributesSet
func (t *ModifyCheckSettings) FromHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpAttributesSet performs a merge with any union data inside the ModifyCheckSettings, using the provided HttpAttributesSet
func (t *ModifyCheckSettings) MergeHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpCustomAttributes returns the union data inside the ModifyCheckSettings as a HttpCustomAttributes
func (t ModifyCheckSettings) AsHttpCustomAttributes() (HttpCustomAttributes, error) {
	var body HttpCustomAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpCustomAttributes overwrites any union data inside the ModifyCheckSettings as the provided HttpCustomAttributes
func (t *ModifyCheckSettings) FromHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpCustomAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided HttpCustomAttributes
func (t *ModifyCheckSettings) MergeHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTcpAttributes returns the union data inside the ModifyCheckSettings as a TcpAttributes
func (t ModifyCheckSettings) AsTcpAttributes() (TcpAttributes, error) {
	var body TcpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTcpAttributes overwrites any union data inside the ModifyCheckSettings as the provided TcpAttributes
func (t *ModifyCheckSettings) FromTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTcpAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided TcpAttributes
func (t *ModifyCheckSettings) MergeTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDnsAttributes returns the union data inside the ModifyCheckSettings as a DnsAttributes
func (t ModifyCheckSettings) AsDnsAttributes() (DnsAttributes, error) {
	var body DnsAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnsAttributes overwrites any union data inside the ModifyCheckSettings as the provided DnsAttributes
func (t *ModifyCheckSettings) FromDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnsAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided DnsAttributes
func (t *ModifyCheckSettings) MergeDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUdpAttributes returns the union data inside the ModifyCheckSettings as a UdpAttributes
func (t ModifyCheckSettings) AsUdpAttributes() (UdpAttributes, error) {
	var body UdpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUdpAttributes overwrites any union data inside the ModifyCheckSettings as the provided UdpAttributes
func (t *ModifyCheckSettings) FromUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUdpAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided UdpAttributes
func (t *ModifyCheckSettings) MergeUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSmtpAttributesSet returns the union data inside the ModifyCheckSettings as a SmtpAttributesSet
func (t ModifyCheckSettings) AsSmtpAttributesSet() (SmtpAttributesSet, error) {
	var body SmtpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmtpAttributesSet overwrites any union data inside the ModifyCheckSettings as the provided SmtpAttributesSet
func (t *ModifyCheckSettings) FromSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmtpAttributesSet performs a merge with any union data inside the ModifyCheckSettings, using the provided SmtpAttributesSet
func (t *ModifyCheckSettings) MergeSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPop3Attributes returns the union data inside the ModifyCheckSettings as a Pop3Attributes
func (t ModifyCheckSettings) AsPop3Attributes() (Pop3Attributes, error) {
	var body Pop3Attributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPop3Attributes overwrites any union data inside the ModifyCheckSettings as the provided Pop3Attributes
func (t *ModifyCheckSettings) FromPop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePop3Attributes performs a merge with any union data inside the ModifyCheckSettings, using the provided Pop3Attributes
func (t *ModifyCheckSettings) MergePop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsImapAttributes returns the union data inside the ModifyCheckSettings as a ImapAttributes
func (t ModifyCheckSettings) AsImapAttributes() (ImapAttributes, error) {
	var body ImapAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImapAttributes overwrites any union data inside the ModifyCheckSettings as the provided ImapAttributes
func (t *ModifyCheckSettings) FromImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImapAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided ImapAttributes
func (t *ModifyCheckSettings) MergeImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModifyCheckSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Addtags != nil {
		object["addtags"], err = json.Marshal(t.Addtags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addtags': %w", err)
		}
	}

	if t.Checkids != nil {
		object["checkids"], err = json.Marshal(t.Checkids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'checkids': %w", err)
		}
	}

	if t.CustomMessage != nil {
		object["custom_message"], err = json.Marshal(t.CustomMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'custom_message': %w", err)
		}
	}

	if t.Host != nil {
		object["host"], err = json.Marshal(t.Host)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'host': %w", err)
		}
	}

	if t.Integrationids != nil {
		object["integrationids"], err = json.Marshal(t.Integrationids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'integrationids': %w", err)
		}
	}

	if t.Ipv6 != nil {
		object["ipv6"], err = json.Marshal(t.Ipv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Notifyagainevery != nil {
		object["notifyagainevery"], err = json.Marshal(t.Notifyagainevery)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyagainevery': %w", err)
		}
	}

	if t.Notifywhenbackup != nil {
		object["notifywhenbackup"], err = json.Marshal(t.Notifywhenbackup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifywhenbackup': %w", err)
		}
	}

	if t.Paused != nil {
		object["paused"], err = json.Marshal(t.Paused)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paused': %w", err)
		}
	}

	if t.ProbeFilters != nil {
		object["probe_filters"], err = json.Marshal(t.ProbeFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'probe_filters': %w", err)
		}
	}

	if t.Resolution != nil {
		object["resolution"], err = json.Marshal(t.Resolution)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resolution': %w", err)
		}
	}

	if t.ResponsetimeThreshold != nil {
		object["responsetime_threshold"], err = json.Marshal(t.ResponsetimeThreshold)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'responsetime_threshold': %w", err)
		}
	}

	if t.Sendnotificationwhendown != nil {
		object["sendnotificationwhendown"], err = json.Marshal(t.Sendnotificationwhendown)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sendnotificationwhendown': %w", err)
		}
	}

	if t.Tags != nil {
		object["tags"], err = json.Marshal(t.Tags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tags': %w", err)
		}
	}

	if t.Teamids != nil {
		object["teamids"], err = json.Marshal(t.Teamids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'teamids': %w", err)
		}
	}

	if t.Userids != nil {
		object["userids"], err = json.Marshal(t.Userids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userids': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ModifyCheckSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addtags"]; found {
		err = json.Unmarshal(raw, &t.Addtags)
		if err != nil {
			return fmt.Errorf("error reading 'addtags': %w", err)
		}
	}

	if raw, found := object["checkids"]; found {
		err = json.Unmarshal(raw, &t.Checkids)
		if err != nil {
			return fmt.Errorf("error reading 'checkids': %w", err)
		}
	}

	if raw, found := object["custom_message"]; found {
		err = json.Unmarshal(raw, &t.CustomMessage)
		if err != nil {
			return fmt.Errorf("error reading 'custom_message': %w", err)
		}
	}

	if raw, found := object["host"]; found {
		err = json.Unmarshal(raw, &t.Host)
		if err != nil {
			return fmt.Errorf("error reading 'host': %w", err)
		}
	}

	if raw, found := object["integrationids"]; found {
		err = json.Unmarshal(raw, &t.Integrationids)
		if err != nil {
			return fmt.Errorf("error reading 'integrationids': %w", err)
		}
	}

	if raw, found := object["ipv6"]; found {
		err = json.Unmarshal(raw, &t.Ipv6)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["notifyagainevery"]; found {
		err = json.Unmarshal(raw, &t.Notifyagainevery)
		if err != nil {
			return fmt.Errorf("error reading 'notifyagainevery': %w", err)
		}
	}

	if raw, found := object["notifywhenbackup"]; found {
		err = json.Unmarshal(raw, &t.Notifywhenbackup)
		if err != nil {
			return fmt.Errorf("error reading 'notifywhenbackup': %w", err)
		}
	}

	if raw, found := object["paused"]; found {
		err = json.Unmarshal(raw, &t.Paused)
		if err != nil {
			return fmt.Errorf("error reading 'paused': %w", err)
		}
	}

	if raw, found := object["probe_filters"]; found {
		err = json.Unmarshal(raw, &t.ProbeFilters)
		if err != nil {
			return fmt.Errorf("error reading 'probe_filters': %w", err)
		}
	}

	if raw, found := object["resolution"]; found {
		err = json.Unmarshal(raw, &t.Resolution)
		if err != nil {
			return fmt.Errorf("error reading 'resolution': %w", err)
		}
	}

	if raw, found := object["responsetime_threshold"]; found {
		err = json.Unmarshal(raw, &t.ResponsetimeThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'responsetime_threshold': %w", err)
		}
	}

	if raw, found := object["sendnotificationwhendown"]; found {
		err = json.Unmarshal(raw, &t.Sendnotificationwhendown)
		if err != nil {
			return fmt.Errorf("error reading 'sendnotificationwhendown': %w", err)
		}
	}

	if raw, found := object["tags"]; found {
		err = json.Unmarshal(raw, &t.Tags)
		if err != nil {
			return fmt.Errorf("error reading 'tags': %w", err)
		}
	}

	if raw, found := object["teamids"]; found {
		err = json.Unmarshal(raw, &t.Teamids)
		if err != nil {
			return fmt.Errorf("error reading 'teamids': %w", err)
		}
	}

	if raw, found := object["userids"]; found {
		err = json.Unmarshal(raw, &t.Userids)
		if err != nil {
			return fmt.Errorf("error reading 'userids': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteChecksWithBody request with any body
	DeleteChecksWithBody(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteChecks(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChecks request
	GetChecks(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChecksWithBody request with any body
	PostChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChecks(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChecksWithFormdataBody(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChecksWithBody request with any body
	PutChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecks(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecksWithFormdataBody(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChecksCheckid request
	DeleteChecksCheckid(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChecksCheckid request
	GetChecksCheckid(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChecksCheckidWithBody request with any body
	PutChecksCheckidWithBody(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecksCheckid(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecksCheckidWithFormdataBody(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteChecksWithBody(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChecksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChecks(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChecksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChecks(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChecksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChecksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChecks(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChecksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChecksWithFormdataBody(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChecksRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecks(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksWithFormdataBody(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChecksCheckid(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChecksCheckidRequest(c.Server, checkid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChecksCheckid(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChecksCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksCheckidWithBody(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksCheckidRequestWithBody(c.Server, checkid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksCheckid(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksCheckidRequest(c.Server, checkid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksCheckidWithFormdataBody(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksCheckidRequestWithFormdataBody(c.Server, checkid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteChecksRequest calls the generic DeleteChecks builder with application/json body
func NewDeleteChecksRequest(server string, params *DeleteChecksParams, body DeleteChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteChecksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteChecksRequestWithBody generates requests for DeleteChecks with any type of body
func NewDeleteChecksRequestWithBody(server string, params *DeleteChecksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "delcheckids", runtime.ParamLocationQuery, params.Delcheckids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChecksRequest generates requests for GetChecks
func NewGetChecksRequest(server string, params *GetChecksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Showencryption != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showencryption", runtime.ParamLocationQuery, *params.Showencryption); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_tags", runtime.ParamLocationQuery, *params.IncludeTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_severity", runtime.ParamLocationQuery, *params.IncludeSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChecksRequest calls the generic PostChecks builder with application/json body
func NewPostChecksRequest(server string, body PostChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChecksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChecksRequestWithFormdataBody calls the generic PostChecks builder with application/x-www-form-urlencoded body
func NewPostChecksRequestWithFormdataBody(server string, body PostChecksFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostChecksRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostChecksRequestWithBody generates requests for PostChecks with any type of body
func NewPostChecksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutChecksRequest calls the generic PutChecks builder with application/json body
func NewPutChecksRequest(server string, body PutChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChecksRequestWithBody(server, "application/json", bodyReader)
}

// NewPutChecksRequestWithFormdataBody calls the generic PutChecks builder with application/x-www-form-urlencoded body
func NewPutChecksRequestWithFormdataBody(server string, body PutChecksFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutChecksRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutChecksRequestWithBody generates requests for PutChecks with any type of body
func NewPutChecksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChecksCheckidRequest generates requests for DeleteChecksCheckid
func NewDeleteChecksCheckidRequest(server string, checkid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChecksCheckidRequest generates requests for GetChecksCheckid
func NewGetChecksCheckidRequest(server string, checkid int, params *GetChecksCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTeams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_teams", runtime.ParamLocationQuery, *params.IncludeTeams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChecksCheckidRequest calls the generic PutChecksCheckid builder with application/json body
func NewPutChecksCheckidRequest(server string, checkid int, body PutChecksCheckidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChecksCheckidRequestWithBody(server, checkid, "application/json", bodyReader)
}

// NewPutChecksCheckidRequestWithFormdataBody calls the generic PutChecksCheckid builder with application/x-www-form-urlencoded body
func NewPutChecksCheckidRequestWithFormdataBody(server string, checkid int, body PutChecksCheckidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutChecksCheckidRequestWithBody(server, checkid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutChecksCheckidRequestWithBody generates requests for PutChecksCheckid with any type of body
func NewPutChecksCheckidRequestWithBody(server string, checkid int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteChecksWithBodyWithResponse request with any body
	DeleteChecksWithBodyWithResponse(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error)

	DeleteChecksWithResponse(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error)

	// GetChecksWithResponse request
	GetChecksWithResponse(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*GetChecksResponse, error)

	// PostChecksWithBodyWithResponse request with any body
	PostChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChecksResponse, error)

	PostChecksWithResponse(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error)

	PostChecksWithFormdataBodyWithResponse(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error)

	// PutChecksWithBodyWithResponse request with any body
	PutChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksResponse, error)

	PutChecksWithResponse(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error)

	PutChecksWithFormdataBodyWithResponse(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error)

	// DeleteChecksCheckidWithResponse request
	DeleteChecksCheckidWithResponse(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*DeleteChecksCheckidResponse, error)

	// GetChecksCheckidWithResponse request
	GetChecksCheckidWithResponse(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*GetChecksCheckidResponse, error)

	// PutChecksCheckidWithBodyWithResponse request with any body
	PutChecksCheckidWithBodyWithResponse(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error)

	PutChecksCheckidWithResponse(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error)

	PutChecksCheckidWithFormdataBodyWithResponse(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error)
}

type DeleteChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r GetChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Check *struct {
			// Id Created check ID.
			Id *int `json:"id,omitempty"`

			// Name Created check name.
			Name *string `json:"name,omitempty"`
		} `json:"check,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChecksCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteChecksCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChecksCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChecksCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DetailedCheck
}

// Status returns HTTPResponse.Status
func (r GetChecksCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChecksCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChecksCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutChecksCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChecksCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteChecksWithBodyWithResponse request with arbitrary body returning *DeleteChecksResponse
func (c *ClientWithResponses) DeleteChecksWithBodyWithResponse(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error) {
	rsp, err := c.DeleteChecksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChecksResponse(rsp)
}

func (c *ClientWithResponses) DeleteChecksWithResponse(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error) {
	rsp, err := c.DeleteChecks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChecksResponse(rsp)
}

// GetChecksWithResponse request returning *GetChecksResponse
func (c *ClientWithResponses) GetChecksWithResponse(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*GetChecksResponse, error) {
	rsp, err := c.GetChecks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChecksResponse(rsp)
}

// PostChecksWithBodyWithResponse request with arbitrary body returning *PostChecksResponse
func (c *ClientWithResponses) PostChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChecksResponse, error) {
	rsp, err := c.PostChecksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChecksResponse(rsp)
}

func (c *ClientWithResponses) PostChecksWithResponse(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error) {
	rsp, err := c.PostChecks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChecksResponse(rsp)
}

func (c *ClientWithResponses) PostChecksWithFormdataBodyWithResponse(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error) {
	rsp, err := c.PostChecksWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChecksResponse(rsp)
}

// PutChecksWithBodyWithResponse request with arbitrary body returning *PutChecksResponse
func (c *ClientWithResponses) PutChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksResponse, error) {
	rsp, err := c.PutChecksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksResponse(rsp)
}

func (c *ClientWithResponses) PutChecksWithResponse(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error) {
	rsp, err := c.PutChecks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksResponse(rsp)
}

func (c *ClientWithResponses) PutChecksWithFormdataBodyWithResponse(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error) {
	rsp, err := c.PutChecksWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksResponse(rsp)
}

// DeleteChecksCheckidWithResponse request returning *DeleteChecksCheckidResponse
func (c *ClientWithResponses) DeleteChecksCheckidWithResponse(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*DeleteChecksCheckidResponse, error) {
	rsp, err := c.DeleteChecksCheckid(ctx, checkid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChecksCheckidResponse(rsp)
}

// GetChecksCheckidWithResponse request returning *GetChecksCheckidResponse
func (c *ClientWithResponses) GetChecksCheckidWithResponse(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*GetChecksCheckidResponse, error) {
	rsp, err := c.GetChecksCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChecksCheckidResponse(rsp)
}

// PutChecksCheckidWithBodyWithResponse request with arbitrary body returning *PutChecksCheckidResponse
func (c *ClientWithResponses) PutChecksCheckidWithBodyWithResponse(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error) {
	rsp, err := c.PutChecksCheckidWithBody(ctx, checkid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksCheckidResponse(rsp)
}

func (c *ClientWithResponses) PutChecksCheckidWithResponse(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error) {
	rsp, err := c.PutChecksCheckid(ctx, checkid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksCheckidResponse(rsp)
}

func (c *ClientWithResponses) PutChecksCheckidWithFormdataBodyWithResponse(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error) {
	rsp, err := c.PutChecksCheckidWithFormdataBody(ctx, checkid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksCheckidResponse(rsp)
}

// ParseDeleteChecksResponse parses an HTTP response from a DeleteChecksWithResponse call
func ParseDeleteChecksResponse(rsp *http.Response) (*DeleteChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChecksResponse parses an HTTP response from a GetChecksWithResponse call
func ParseGetChecksResponse(rsp *http.Response) (*GetChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChecksResponse parses an HTTP response from a PostChecksWithResponse call
func ParsePostChecksResponse(rsp *http.Response) (*PostChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Check *struct {
				// Id Created check ID.
				Id *int `json:"id,omitempty"`

				// Name Created check name.
				Name *string `json:"name,omitempty"`
			} `json:"check,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChecksResponse parses an HTTP response from a PutChecksWithResponse call
func ParsePutChecksResponse(rsp *http.Response) (*PutChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChecksCheckidResponse parses an HTTP response from a DeleteChecksCheckidWithResponse call
func ParseDeleteChecksCheckidResponse(rsp *http.Response) (*DeleteChecksCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChecksCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChecksCheckidResponse parses an HTTP response from a GetChecksCheckidWithResponse call
func ParseGetChecksCheckidResponse(rsp *http.Response) (*GetChecksCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChecksCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DetailedCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChecksCheckidResponse parses an HTTP response from a PutChecksCheckidWithResponse call
func ParsePutChecksCheckidResponse(rsp *http.Response) (*PutChecksCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChecksCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
