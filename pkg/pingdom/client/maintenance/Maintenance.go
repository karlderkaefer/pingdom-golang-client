// Package maintenance provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package maintenance

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for MaintenanceIdPutRecurrencetype.
const (
	MaintenanceIdPutRecurrencetypeDay   MaintenanceIdPutRecurrencetype = "day"
	MaintenanceIdPutRecurrencetypeMonth MaintenanceIdPutRecurrencetype = "month"
	MaintenanceIdPutRecurrencetypeNone  MaintenanceIdPutRecurrencetype = "none"
	MaintenanceIdPutRecurrencetypeWeek  MaintenanceIdPutRecurrencetype = "week"
)

// Defines values for MaintenanceOrder.
const (
	Asc  MaintenanceOrder = "asc"
	Desc MaintenanceOrder = "desc"
)

// Defines values for MaintenanceOrderby.
const (
	Description MaintenanceOrderby = "description"
	Effectiveto MaintenanceOrderby = "effectiveto"
	From        MaintenanceOrderby = "from"
	To          MaintenanceOrderby = "to"
)

// Defines values for MaintenancePostRecurrencetype.
const (
	MaintenancePostRecurrencetypeDay   MaintenancePostRecurrencetype = "day"
	MaintenancePostRecurrencetypeMonth MaintenancePostRecurrencetype = "month"
	MaintenancePostRecurrencetypeNone  MaintenancePostRecurrencetype = "none"
	MaintenancePostRecurrencetypeWeek  MaintenancePostRecurrencetype = "week"
)

// Defines values for MaintenanceRespAttrsMaintenanceRecurrencetype.
const (
	Day   MaintenanceRespAttrsMaintenanceRecurrencetype = "day"
	Month MaintenanceRespAttrsMaintenanceRecurrencetype = "month"
	None  MaintenanceRespAttrsMaintenanceRecurrencetype = "none"
	Week  MaintenanceRespAttrsMaintenanceRecurrencetype = "week"
)

// MaintenanceDeleteRespAttrs defines model for maintenance_delete_resp_attrs.
type MaintenanceDeleteRespAttrs struct {
	// Message Result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceId defines model for maintenance_id.
type MaintenanceId = int

// MaintenanceIdDeleteRespAttrs defines model for maintenance_id_delete_resp_attrs.
type MaintenanceIdDeleteRespAttrs struct {
	// Message Result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceIdPut defines model for maintenance_id_put.
type MaintenanceIdPut struct {
	// Description Description
	Description *string `json:"description,omitempty"`

	// Effectiveto Recurrence end. Format UNIX time. Default: equal to `to`. (Only future allowed. Use 1 for the current timestamp.)
	Effectiveto *int `json:"effectiveto,omitempty"`

	// From Initial maintenance window start. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	From *int `json:"from,omitempty"`

	// Recurrencetype Type of recurrence
	Recurrencetype *MaintenanceIdPutRecurrencetype `json:"recurrencetype,omitempty"`

	// Repeatevery Repeat every n-th day/week/month
	Repeatevery *int `json:"repeatevery,omitempty"`

	// Tmsids Identifiers of transaction checks to assign to the maintenance window - Comma separated Integers
	Tmsids *[]int `json:"tmsids,omitempty"`

	// To Initial maintenance window end. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	To *int `json:"to,omitempty"`

	// Uptimeids Identifiers of uptime checks to assign to the maintenance window - Comma separated Integers
	Uptimeids *[]int `json:"uptimeids,omitempty"`
}

// MaintenanceIdPutRecurrencetype Type of recurrence
type MaintenanceIdPutRecurrencetype string

// MaintenanceIdPutRespAttrs defines model for maintenance_id_put_resp_attrs.
type MaintenanceIdPutRespAttrs struct {
	// Message Modification result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceIdRespAttrs defines model for maintenance_id_resp_attrs.
type MaintenanceIdRespAttrs struct {
	Maintenance *struct {
		// Checks Connected checks
		Checks *struct {
			// Tms Id of connected TMS check
			Tms *[]float32 `json:"tms,omitempty"`

			// Uptime Id of connected Uptime check
			Uptime *[]float32 `json:"uptime,omitempty"`
		} `json:"checks,omitempty"`

		// Description Description
		Description *string `json:"description,omitempty"`

		// Effectiveto Recurrence end. Format UNIX time.
		Effectiveto *float32 `json:"effectiveto,omitempty"`

		// From Initial maintenance window start. Format UNIX time.
		From *float32 `json:"from,omitempty"`

		// Id Maintenance window identifier
		Id *float32 `json:"id,omitempty"`

		// Recurrencetype Type of recurrence.
		Recurrencetype *string `json:"recurrencetype,omitempty"`

		// Repeatevery Repeat every n-th day/week/month
		Repeatevery *float32 `json:"repeatevery,omitempty"`

		// To Initial maintenance window end. Format UNIX time.
		To *float32 `json:"to,omitempty"`
	} `json:"maintenance,omitempty"`
}

// MaintenanceLimit defines model for maintenance_limit.
type MaintenanceLimit = int

// MaintenanceOffset defines model for maintenance_offset.
type MaintenanceOffset = int

// MaintenanceOrder defines model for maintenance_order.
type MaintenanceOrder string

// MaintenanceOrderby defines model for maintenance_orderby.
type MaintenanceOrderby string

// MaintenancePost defines model for maintenance_post.
type MaintenancePost struct {
	// Description Description
	Description string `json:"description"`

	// Effectiveto Recurrence end. Format UNIX time. Default: equal to `to`. (Only future allowed. Use 1 for the current timestamp.)
	Effectiveto *int `json:"effectiveto,omitempty"`

	// From Initial maintenance window start. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	From int `json:"from"`

	// Recurrencetype Type of recurrence.
	Recurrencetype *MaintenancePostRecurrencetype `json:"recurrencetype,omitempty"`

	// Repeatevery Repeat every n-th day/week/month
	Repeatevery *int `json:"repeatevery,omitempty"`

	// Tmsids Identifiers of transaction checks to assign to the maintenance window - Comma separated Integers
	Tmsids *[]int `json:"tmsids,omitempty"`

	// To Initial maintenance window end. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	To int `json:"to"`

	// Uptimeids Identifiers of uptime checks to assign to the maintenance window - Comma separated Integers
	Uptimeids *[]int `json:"uptimeids,omitempty"`
}

// MaintenancePostRecurrencetype Type of recurrence.
type MaintenancePostRecurrencetype string

// MaintenancePostRespAttrs defines model for maintenance_post_resp_attrs.
type MaintenancePostRespAttrs struct {
	Maintenance *struct {
		// Id Unique id of the new maintenance window
		Id *int `json:"id,omitempty"`
	} `json:"maintenance,omitempty"`
}

// MaintenanceRespAttrs defines model for maintenance_resp_attrs.
type MaintenanceRespAttrs struct {
	// Maintenance A list of maintenance windows
	Maintenance *[]struct {
		// Checks Connected checks
		Checks *struct {
			// Tms List of connected Transaction checks
			Tms *[]int `json:"tms,omitempty"`

			// Uptime List of connected Uptime checks
			Uptime *[]int `json:"uptime,omitempty"`
		} `json:"checks,omitempty"`

		// Description Description
		Description *string `json:"description,omitempty"`

		// Effectiveto Recurrence end. Format UNIX time.
		Effectiveto *int `json:"effectiveto,omitempty"`

		// From Initial maintenance window start. Format UNIX time.
		From *int `json:"from,omitempty"`

		// Id Maintenance window identifier
		Id *int `json:"id,omitempty"`

		// Recurrencetype Type of recurrence.
		Recurrencetype *MaintenanceRespAttrsMaintenanceRecurrencetype `json:"recurrencetype,omitempty"`

		// Repeatevery Repeat every n-th day/week/month
		Repeatevery *int `json:"repeatevery,omitempty"`

		// To Initial maintenance window end. Format UNIX time.
		To *int `json:"to,omitempty"`
	} `json:"maintenance,omitempty"`
}

// MaintenanceRespAttrsMaintenanceRecurrencetype Type of recurrence.
type MaintenanceRespAttrsMaintenanceRecurrencetype string

// DeleteMaintenanceParams defines parameters for DeleteMaintenance.
type DeleteMaintenanceParams struct {
	// Maintenanceids Comma-separated list of identifiers of maintenance windows to be deleted.
	Maintenanceids []int `form:"maintenanceids" json:"maintenanceids"`
}

// GetMaintenanceParams defines parameters for GetMaintenance.
type GetMaintenanceParams struct {
	// Limit Count of items to list.
	Limit *MaintenanceLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset of the list.
	Offset *MaintenanceOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Orderby Order by the specific property of the maintenance window.
	Orderby *MaintenanceOrderby `form:"orderby,omitempty" json:"orderby,omitempty"`

	// Order Order a-z for asc z-a for desc. Works only if orderby is specified.
	Order *MaintenanceOrder `form:"order,omitempty" json:"order,omitempty"`
}

// PostMaintenanceJSONRequestBody defines body for PostMaintenance for application/json ContentType.
type PostMaintenanceJSONRequestBody = MaintenancePost

// PostMaintenanceFormdataRequestBody defines body for PostMaintenance for application/x-www-form-urlencoded ContentType.
type PostMaintenanceFormdataRequestBody = MaintenancePost

// PutMaintenanceIdJSONRequestBody defines body for PutMaintenanceId for application/json ContentType.
type PutMaintenanceIdJSONRequestBody = MaintenanceIdPut

// PutMaintenanceIdFormdataRequestBody defines body for PutMaintenanceId for application/x-www-form-urlencoded ContentType.
type PutMaintenanceIdFormdataRequestBody = MaintenanceIdPut

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteMaintenance request
	DeleteMaintenance(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaintenance request
	GetMaintenance(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMaintenanceWithBody request with any body
	PostMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMaintenance(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMaintenanceWithFormdataBody(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMaintenanceId request
	DeleteMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaintenanceId request
	GetMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMaintenanceIdWithBody request with any body
	PutMaintenanceIdWithBody(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMaintenanceId(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMaintenanceIdWithFormdataBody(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteMaintenance(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMaintenanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaintenance(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaintenanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMaintenanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMaintenance(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMaintenanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMaintenanceWithFormdataBody(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMaintenanceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMaintenanceIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaintenanceIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceIdWithBody(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceId(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceIdWithFormdataBody(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceIdRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteMaintenanceRequest generates requests for DeleteMaintenance
func NewDeleteMaintenanceRequest(server string, params *DeleteMaintenanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "maintenanceids", runtime.ParamLocationQuery, params.Maintenanceids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaintenanceRequest generates requests for GetMaintenance
func NewGetMaintenanceRequest(server string, params *GetMaintenanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMaintenanceRequest calls the generic PostMaintenance builder with application/json body
func NewPostMaintenanceRequest(server string, body PostMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMaintenanceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMaintenanceRequestWithFormdataBody calls the generic PostMaintenance builder with application/x-www-form-urlencoded body
func NewPostMaintenanceRequestWithFormdataBody(server string, body PostMaintenanceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostMaintenanceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostMaintenanceRequestWithBody generates requests for PostMaintenance with any type of body
func NewPostMaintenanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMaintenanceIdRequest generates requests for DeleteMaintenanceId
func NewDeleteMaintenanceIdRequest(server string, id MaintenanceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaintenanceIdRequest generates requests for GetMaintenanceId
func NewGetMaintenanceIdRequest(server string, id MaintenanceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMaintenanceIdRequest calls the generic PutMaintenanceId builder with application/json body
func NewPutMaintenanceIdRequest(server string, id MaintenanceId, body PutMaintenanceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMaintenanceIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutMaintenanceIdRequestWithFormdataBody calls the generic PutMaintenanceId builder with application/x-www-form-urlencoded body
func NewPutMaintenanceIdRequestWithFormdataBody(server string, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutMaintenanceIdRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutMaintenanceIdRequestWithBody generates requests for PutMaintenanceId with any type of body
func NewPutMaintenanceIdRequestWithBody(server string, id MaintenanceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteMaintenanceWithResponse request
	DeleteMaintenanceWithResponse(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*DeleteMaintenanceResponse, error)

	// GetMaintenanceWithResponse request
	GetMaintenanceWithResponse(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*GetMaintenanceResponse, error)

	// PostMaintenanceWithBodyWithResponse request with any body
	PostMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error)

	PostMaintenanceWithResponse(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error)

	PostMaintenanceWithFormdataBodyWithResponse(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error)

	// DeleteMaintenanceIdWithResponse request
	DeleteMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*DeleteMaintenanceIdResponse, error)

	// GetMaintenanceIdWithResponse request
	GetMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*GetMaintenanceIdResponse, error)

	// PutMaintenanceIdWithBodyWithResponse request with any body
	PutMaintenanceIdWithBodyWithResponse(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error)

	PutMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error)

	PutMaintenanceIdWithFormdataBodyWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error)
}

type DeleteMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceDeleteRespAttrs
}

// Status returns HTTPResponse.Status
func (r DeleteMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenancePostRespAttrs
}

// Status returns HTTPResponse.Status
func (r PostMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMaintenanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceIdDeleteRespAttrs
}

// Status returns HTTPResponse.Status
func (r DeleteMaintenanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMaintenanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaintenanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceIdRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetMaintenanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaintenanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMaintenanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceIdPutRespAttrs
}

// Status returns HTTPResponse.Status
func (r PutMaintenanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMaintenanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteMaintenanceWithResponse request returning *DeleteMaintenanceResponse
func (c *ClientWithResponses) DeleteMaintenanceWithResponse(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*DeleteMaintenanceResponse, error) {
	rsp, err := c.DeleteMaintenance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMaintenanceResponse(rsp)
}

// GetMaintenanceWithResponse request returning *GetMaintenanceResponse
func (c *ClientWithResponses) GetMaintenanceWithResponse(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*GetMaintenanceResponse, error) {
	rsp, err := c.GetMaintenance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaintenanceResponse(rsp)
}

// PostMaintenanceWithBodyWithResponse request with arbitrary body returning *PostMaintenanceResponse
func (c *ClientWithResponses) PostMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error) {
	rsp, err := c.PostMaintenanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PostMaintenanceWithResponse(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error) {
	rsp, err := c.PostMaintenance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PostMaintenanceWithFormdataBodyWithResponse(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error) {
	rsp, err := c.PostMaintenanceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMaintenanceResponse(rsp)
}

// DeleteMaintenanceIdWithResponse request returning *DeleteMaintenanceIdResponse
func (c *ClientWithResponses) DeleteMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*DeleteMaintenanceIdResponse, error) {
	rsp, err := c.DeleteMaintenanceId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMaintenanceIdResponse(rsp)
}

// GetMaintenanceIdWithResponse request returning *GetMaintenanceIdResponse
func (c *ClientWithResponses) GetMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*GetMaintenanceIdResponse, error) {
	rsp, err := c.GetMaintenanceId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaintenanceIdResponse(rsp)
}

// PutMaintenanceIdWithBodyWithResponse request with arbitrary body returning *PutMaintenanceIdResponse
func (c *ClientWithResponses) PutMaintenanceIdWithBodyWithResponse(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error) {
	rsp, err := c.PutMaintenanceIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceIdResponse(rsp)
}

func (c *ClientWithResponses) PutMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error) {
	rsp, err := c.PutMaintenanceId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceIdResponse(rsp)
}

func (c *ClientWithResponses) PutMaintenanceIdWithFormdataBodyWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error) {
	rsp, err := c.PutMaintenanceIdWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceIdResponse(rsp)
}

// ParseDeleteMaintenanceResponse parses an HTTP response from a DeleteMaintenanceWithResponse call
func ParseDeleteMaintenanceResponse(rsp *http.Response) (*DeleteMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceDeleteRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaintenanceResponse parses an HTTP response from a GetMaintenanceWithResponse call
func ParseGetMaintenanceResponse(rsp *http.Response) (*GetMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMaintenanceResponse parses an HTTP response from a PostMaintenanceWithResponse call
func ParsePostMaintenanceResponse(rsp *http.Response) (*PostMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenancePostRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMaintenanceIdResponse parses an HTTP response from a DeleteMaintenanceIdWithResponse call
func ParseDeleteMaintenanceIdResponse(rsp *http.Response) (*DeleteMaintenanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMaintenanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceIdDeleteRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaintenanceIdResponse parses an HTTP response from a GetMaintenanceIdWithResponse call
func ParseGetMaintenanceIdResponse(rsp *http.Response) (*GetMaintenanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaintenanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceIdRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMaintenanceIdResponse parses an HTTP response from a PutMaintenanceIdWithResponse call
func ParsePutMaintenanceIdResponse(rsp *http.Response) (*PutMaintenanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMaintenanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceIdPutRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
