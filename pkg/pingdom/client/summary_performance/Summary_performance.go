// Package summary_performance provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package summary_performance

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for SummaryPerformanceOrder.
const (
	Asc  SummaryPerformanceOrder = "asc"
	Desc SummaryPerformanceOrder = "desc"
)

// Defines values for SummaryPerformanceResolution.
const (
	Day  SummaryPerformanceResolution = "day"
	Hour SummaryPerformanceResolution = "hour"
	Week SummaryPerformanceResolution = "week"
)

// Days defines model for Days.
type Days struct {
	Days *SummaryPerformanceResults `json:"days,omitempty"`
}

// Hours defines model for Hours.
type Hours struct {
	Hours *SummaryPerformanceResults `json:"hours,omitempty"`
}

// Weeks defines model for Weeks.
type Weeks struct {
	Weeks *SummaryPerformanceResults `json:"weeks,omitempty"`
}

// SummaryPerformanceCheckid defines model for summary.performance_checkid.
type SummaryPerformanceCheckid = int

// SummaryPerformanceFrom defines model for summary.performance_from.
type SummaryPerformanceFrom = int

// SummaryPerformanceIncludeuptime defines model for summary.performance_includeuptime.
type SummaryPerformanceIncludeuptime = bool

// SummaryPerformanceOrder defines model for summary.performance_order.
type SummaryPerformanceOrder string

// SummaryPerformanceProbes defines model for summary.performance_probes.
type SummaryPerformanceProbes = string

// SummaryPerformanceResolution defines model for summary.performance_resolution.
type SummaryPerformanceResolution string

// SummaryPerformanceRespAttrs defines model for summary.performance_resp_attrs.
type SummaryPerformanceRespAttrs struct {
	Summary *SummaryPerformanceRespAttrs_Summary `json:"summary,omitempty"`
}

// SummaryPerformanceRespAttrs_Summary defines model for SummaryPerformanceRespAttrs.Summary.
type SummaryPerformanceRespAttrs_Summary struct {
	union json.RawMessage
}

// SummaryPerformanceResults defines model for summary.performance_results.
type SummaryPerformanceResults = []struct {
	// Avgresponse Average response time for this interval in milliseconds
	Avgresponse *float32 `json:"avgresponse,omitempty"`

	// Downtime Total downtime for this interval in seconds
	Downtime *float32 `json:"downtime,omitempty"`

	// Starttime Interval start. Format UNIX timestamp
	Starttime *float32 `json:"starttime,omitempty"`

	// Unmonitored Total unmonitored time for this interval in seconds
	Unmonitored *float32 `json:"unmonitored,omitempty"`

	// Uptime Total uptime for this interval in seconds
	Uptime *float32 `json:"uptime,omitempty"`
}

// SummaryPerformanceTo defines model for summary.performance_to.
type SummaryPerformanceTo = int

// GetSummaryPerformanceCheckidParams defines parameters for GetSummaryPerformanceCheckid.
type GetSummaryPerformanceCheckidParams struct {
	// From Start time of period. Format is UNIX timestamp. Default value is 10 intervals earlier than `to`.
	From *SummaryPerformanceFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. Format is UNIX timestamp. Default value is the current time.
	To *SummaryPerformanceTo `form:"to,omitempty" json:"to,omitempty"`

	// Resolution Interval size
	Resolution *SummaryPerformanceResolution `form:"resolution,omitempty" json:"resolution,omitempty"`

	// Includeuptime Include uptime information.
	Includeuptime *SummaryPerformanceIncludeuptime `form:"includeuptime,omitempty" json:"includeuptime,omitempty"`

	// Probes Filter to only use results from a list of probes. Format is a comma separated list of probe identifiers. Can not be used if includeuptime is set to true. Also note that this can cause intervals to be omitted, since there may be no results from the desired probes in them. By deafult results from all probes are returned.
	Probes *SummaryPerformanceProbes `form:"probes,omitempty" json:"probes,omitempty"`

	// Order Sorting order of sub intervals. Ascending or descending.
	Order *SummaryPerformanceOrder `form:"order,omitempty" json:"order,omitempty"`
}

// AsWeeks returns the union data inside the SummaryPerformanceRespAttrs_Summary as a Weeks
func (t SummaryPerformanceRespAttrs_Summary) AsWeeks() (Weeks, error) {
	var body Weeks
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeeks overwrites any union data inside the SummaryPerformanceRespAttrs_Summary as the provided Weeks
func (t *SummaryPerformanceRespAttrs_Summary) FromWeeks(v Weeks) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeeks performs a merge with any union data inside the SummaryPerformanceRespAttrs_Summary, using the provided Weeks
func (t *SummaryPerformanceRespAttrs_Summary) MergeWeeks(v Weeks) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDays returns the union data inside the SummaryPerformanceRespAttrs_Summary as a Days
func (t SummaryPerformanceRespAttrs_Summary) AsDays() (Days, error) {
	var body Days
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDays overwrites any union data inside the SummaryPerformanceRespAttrs_Summary as the provided Days
func (t *SummaryPerformanceRespAttrs_Summary) FromDays(v Days) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDays performs a merge with any union data inside the SummaryPerformanceRespAttrs_Summary, using the provided Days
func (t *SummaryPerformanceRespAttrs_Summary) MergeDays(v Days) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHours returns the union data inside the SummaryPerformanceRespAttrs_Summary as a Hours
func (t SummaryPerformanceRespAttrs_Summary) AsHours() (Hours, error) {
	var body Hours
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHours overwrites any union data inside the SummaryPerformanceRespAttrs_Summary as the provided Hours
func (t *SummaryPerformanceRespAttrs_Summary) FromHours(v Hours) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHours performs a merge with any union data inside the SummaryPerformanceRespAttrs_Summary, using the provided Hours
func (t *SummaryPerformanceRespAttrs_Summary) MergeHours(v Hours) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SummaryPerformanceRespAttrs_Summary) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SummaryPerformanceRespAttrs_Summary) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSummaryPerformanceCheckid request
	GetSummaryPerformanceCheckid(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSummaryPerformanceCheckid(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSummaryPerformanceCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSummaryPerformanceCheckidRequest generates requests for GetSummaryPerformanceCheckid
func NewGetSummaryPerformanceCheckidRequest(server string, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/summary.performance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Includeuptime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeuptime", runtime.ParamLocationQuery, *params.Includeuptime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Probes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "probes", runtime.ParamLocationQuery, *params.Probes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSummaryPerformanceCheckidWithResponse request
	GetSummaryPerformanceCheckidWithResponse(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryPerformanceCheckidResponse, error)
}

type GetSummaryPerformanceCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SummaryPerformanceRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetSummaryPerformanceCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSummaryPerformanceCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSummaryPerformanceCheckidWithResponse request returning *GetSummaryPerformanceCheckidResponse
func (c *ClientWithResponses) GetSummaryPerformanceCheckidWithResponse(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryPerformanceCheckidResponse, error) {
	rsp, err := c.GetSummaryPerformanceCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSummaryPerformanceCheckidResponse(rsp)
}

// ParseGetSummaryPerformanceCheckidResponse parses an HTTP response from a GetSummaryPerformanceCheckidWithResponse call
func ParseGetSummaryPerformanceCheckidResponse(rsp *http.Response) (*GetSummaryPerformanceCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSummaryPerformanceCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SummaryPerformanceRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
