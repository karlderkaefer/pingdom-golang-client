// Package summary_hoursofday provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package summary_hoursofday

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// SummaryHoursofdayCheckid defines model for summary.hoursofday_checkid.
type SummaryHoursofdayCheckid = int

// SummaryHoursofdayFrom defines model for summary.hoursofday_from.
type SummaryHoursofdayFrom = int

// SummaryHoursofdayProbes defines model for summary.hoursofday_probes.
type SummaryHoursofdayProbes = string

// SummaryHoursofdayRespAttrs defines model for summary.hoursofday_resp_attrs.
type SummaryHoursofdayRespAttrs struct {
	Hoursofday *[]struct {
		// Avgresponse Average response time (in milliseconds) for this hour of the day
		Avgresponse *float32 `json:"avgresponse,omitempty"`

		// Hour Hour of day (0-23). Please note that if data is missing for an individual hour, it's entry will not be included in the result.
		Hour *float32 `json:"hour,omitempty"`
	} `json:"hoursofday,omitempty"`
}

// SummaryHoursofdayTo defines model for summary.hoursofday_to.
type SummaryHoursofdayTo = int

// SummaryHoursofdayUselocaltime defines model for summary.hoursofday_uselocaltime.
type SummaryHoursofdayUselocaltime = bool

// GetSummaryHoursofdayCheckidParams defines parameters for GetSummaryHoursofdayCheckid.
type GetSummaryHoursofdayCheckidParams struct {
	// From Start time of period. Format is UNIX timestamp. Default value is one week eariler than `to`.
	From *SummaryHoursofdayFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. Format is UNIX timestamp. Default value is current time.
	To *SummaryHoursofdayTo `form:"to,omitempty" json:"to,omitempty"`

	// Probes Filter to only use results from a list of probes. Format is a comma separated list of probe identifiers. By default all probes results are returned.
	Probes *SummaryHoursofdayProbes `form:"probes,omitempty" json:"probes,omitempty"`

	// Uselocaltime If true, use the user's local time zone for results (from and to parameters should still be specified in UTC). If false, use UTC for results.
	Uselocaltime *SummaryHoursofdayUselocaltime `form:"uselocaltime,omitempty" json:"uselocaltime,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSummaryHoursofdayCheckid request
	GetSummaryHoursofdayCheckid(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSummaryHoursofdayCheckid(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSummaryHoursofdayCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSummaryHoursofdayCheckidRequest generates requests for GetSummaryHoursofdayCheckid
func NewGetSummaryHoursofdayCheckidRequest(server string, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/summary.hoursofday/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Probes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "probes", runtime.ParamLocationQuery, *params.Probes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uselocaltime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uselocaltime", runtime.ParamLocationQuery, *params.Uselocaltime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSummaryHoursofdayCheckidWithResponse request
	GetSummaryHoursofdayCheckidWithResponse(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryHoursofdayCheckidResponse, error)
}

type GetSummaryHoursofdayCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SummaryHoursofdayRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetSummaryHoursofdayCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSummaryHoursofdayCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSummaryHoursofdayCheckidWithResponse request returning *GetSummaryHoursofdayCheckidResponse
func (c *ClientWithResponses) GetSummaryHoursofdayCheckidWithResponse(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryHoursofdayCheckidResponse, error) {
	rsp, err := c.GetSummaryHoursofdayCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSummaryHoursofdayCheckidResponse(rsp)
}

// ParseGetSummaryHoursofdayCheckidResponse parses an HTTP response from a GetSummaryHoursofdayCheckidWithResponse call
func ParseGetSummaryHoursofdayCheckidResponse(rsp *http.Response) (*GetSummaryHoursofdayCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSummaryHoursofdayCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SummaryHoursofdayRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
